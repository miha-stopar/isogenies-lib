from montgomery import *
from endomorphism import *

def get_lit_si_gamal_params(lam):
    a = lam * 3
    if lam == 128:
        b = 162
        c = 56
        f = 30
    elif lam == 192:
        b = 243
        c = 83
        f = 118
    elif lam == 256:
        b = 324
        c = 111
        f = 436
    else:
        raise ValueError("lam should be 128 or 192 or 256.")

    # For public key generation we need integer n: we compute an isogeny
    # of degree l_a**(2*a) - n**2
    n = 3

    return 2, 3, 5, a, b, c, f, n

def generate_lit_si_gamal_pubparam(a, b, c, sqrtminus, Fp, Fp2, p):

    #The curve of j-invariant 1728
    A = [Fp2(1), 2]
    
    checker = 1
    while checker == 1:
        xP = Fp.random_element()
        P = [xP,1]
        P = scalar(P,A,(p+1)//((2**(a+2))*(3**b)*(5**c)))
        Pa = scalar(P,A,((2**(a+1))*(3**b)*(5**c)))
        Pb = scalar(P,A,((2**(a+2))*(3**(b-1))*(5**c)))
        Pc = scalar(P,A,((2**(a+2))*(3**b)*(5**(c-1))))
        if (Pa[1] != 0) and (Pb[1] != 0) and (Pc[1] != 0):
            checker = 0

    Pa = scalar(P, A, (3**b)*(5**c))
    Pbc = scalar(P, A, 2**(a+2))
    Qbc = [Pbc[0]*(-1), Pbc[1]]

    #[2**a]Pa = (1,*).
    Pa_ = scalar(Pa,A,2**a)

    if Pa_[0] != Pa_[1]:
        # print("+++++++++++")
        # print("")
        Pa[0] *= -1

    checker = 1
    while checker == 1:
        xP = Fp2.random_element()
        Qa = [xP,1]
        Qa = scalar(Qa,A,(p+1)//(2**(a+2)))
        Q = scalar(Qa,A,2**(a+1))
        if (Q[0]**2 == (-1)*Q[1]**2) and (Q[1] != 0):
            checker = 0

    Pb = scalar(Pbc, A, 5**c)
    Qb = scalar(Qbc, A, 5**c)

    Pc = scalar(Pbc, A, 3**b)
    Qc = scalar(Qbc, A, 3**b)

    return [Pa, Qa, Pb, Qb, Pc, Qc]

def precompute_lit_si_gamal(param):
    l_a, l_b, l_c, a, b, c, f, n = get_lit_si_gamal_params(param)

    p = (l_a**(a+2))*(l_b**b)*(l_c**c)*f - 1
    print("p:", p)

    Fp = GF(p)
    Fp2 = GF(p**2, name='sqrtminus', modulus = x**2+1)
    Fp2.inject_variables()

    A24 = [Fp2(1),2]
    AA = [4*A24[0] - 2*A24[1],A24[1]]

    E = EllipticCurve(Fp2, [0, AA[0]/AA[1], 0, 1, 0])

    # strategy = optimal_strategy_3(b-1,12,8)
    # strategy_for_2dim = optimal_strategy_3(a-2,42,27)

    Pa, Qa, Pb, Qb, Pc, Qc = generate_lit_si_gamal_pubparam(a,b,c,sqrtminus,Fp,Fp2,p)

    print("")
    print("l_a:", l_a)
    print("l_b:", l_b)
    print("l_c:", l_c)
    print("")
    print("l_:", l_a**(a+2))

    print("")
    print("a: ", a)
    print("b: ", b)
    print("c: ", c)
    print("")

    # Debugging:
    # Pa = [51591518865664671244510470391681688475455783970474133210973493576681820364987242186479518184663904759520411258000088507668925513743226692928456009922655708633041700455757029249004042072485107310995217842876600552171695369131335987681060588508590522528198730598809999999081727453696113848709208374232158170476432540004091403647907739510284522892476159, 1]
    # Qa = [47543113803667282476162791536654669403724035257253750989812554694794866304394541103467350515620080998931442737313953500095919413717838475852041721685009883605493962540737070711387390909322411432818703102677965533574245015917027664432580235072586091900926328820985981310734925011212485198605926595197843321585418687265875361221434075867793853958284404*sqrtminus + 40279731266585423296360383674768390315172968227661363838239326987335922206252564734908741762673686112358372699113984637998822863426431433863405544204374547498513555957002084206957353404791052663424223260661887286784601193114579331388221806382313666298044188883417693972849999082223189787068609409649392240841153989243821556347039752655527966622847102, 1]

    Pa = E.lift_x(51591518865664671244510470391681688475455783970474133210973493576681820364987242186479518184663904759520411258000088507668925513743226692928456009922655708633041700455757029249004042072485107310995217842876600552171695369131335987681060588508590522528198730598809999999081727453696113848709208374232158170476432540004091403647907739510284522892476159)
    Qa = E.lift_x(47543113803667282476162791536654669403724035257253750989812554694794866304394541103467350515620080998931442737313953500095919413717838475852041721685009883605493962540737070711387390909322411432818703102677965533574245015917027664432580235072586091900926328820985981310734925011212485198605926595197843321585418687265875361221434075867793853958284404*sqrtminus + 40279731266585423296360383674768390315172968227661363838239326987335922206252564734908741762673686112358372699113984637998822863426431433863405544204374547498513555957002084206957353404791052663424223260661887286784601193114579331388221806382313666298044188883417693972849999082223189787068609409649392240841153989243821556347039752655527966622847102)

    Pa = [Pa[0], Pa[2]]
    Qa = [Qa[0], Qa[2]]

    """
    Pb = E.lift_x(76910454557860827894244436304760200384679651358110761296231924845451071888693346772509321434065227621629463806603459203896534292553850635086227786201735153480150319109231506696381827676230462419954015539275913448232146904964406092411412367078681145022720191189072810638179535434807523126332150712565883150424409966531232212903409378064688182613532788)
    Qb = E.lift_x(28332918269280760440652270647371246009305959518387829570714108590634659931787877437209229322753270604877120772785081254640140402382655839866188290408568277181329129708839543857857811667815894390695826890205231868431999157027186227127091033177487812669344685540184354161820464565192476873667849287434116849575590033468767787096590621935311817386467211)

    Pb = [Pb[0], Pb[2]]
    Qb = [Qb[0], Qb[2]]
    """

    """
    Pc = E.lift_x(29960703231962235184612506360465018925527133824311914086960253959390017639147828341023421854245415937056520934062846954733509243882598670653904082545894048758650002634367683756295343972857233129783577883962183716763824559947572518637595472652612209487833036406825267971557109197973790357273423186058109563445539366560018947936858255917374017383092533)
    Qc = E.lift_x(75282669595179353150284200591666427468458477052186676779985779476695714181333395868695128902573082289450063645325693503803165451053907804298511994064409381902829446183703366797944295371189123680866264545518961599900321502044019800900907927603556748204231840322431896828442890802026209642726576813941890436554460633439981052063141744082625982616907466)

    Pc = [Pc[0], Pc[2]]
    Qc = [Qc[0], Qc[2]]
    """


    """
    Pb = [76910454557860827894244436304760200384679651358110761296231924845451071888693346772509321434065227621629463806603459203896534292553850635086227786201735153480150319109231506696381827676230462419954015539275913448232146904964406092411412367078681145022720191189072810638179535434807523126332150712565883150424409966531232212903409378064688182613532788, 1]
    Qb = [28332918269280760440652270647371246009305959518387829570714108590634659931787877437209229322753270604877120772785081254640140402382655839866188290408568277181329129708839543857857811667815894390695826890205231868431999157027186227127091033177487812669344685540184354161820464565192476873667849287434116849575590033468767787096590621935311817386467211, 1]

    Pc = [29960703231962235184612506360465018925527133824311914086960253959390017639147828341023421854245415937056520934062846954733509243882598670653904082545894048758650002634367683756295343972857233129783577883962183716763824559947572518637595472652612209487833036406825267971557109197973790357273423186058109563445539366560018947936858255917374017383092533, 1]
    Qc = [75282669595179353150284200591666427468458477052186676779985779476695714181333395868695128902573082289450063645325693503803165451053907804298511994064409381902829446183703366797944295371189123680866264545518961599900321502044019800900907927603556748204231840322431896828442890802026209642726576813941890436554460633439981052063141744082625982616907466, 1]
    """



    compute_and_print_endomorphism_matrices_montgomery(E, Fp2, Pa, Qa, l_a, a+2)
    # compute_and_print_endomorphism_matrices_montgomery(E, Fp2, Pb, Qb, l_b, b)
    # compute_and_print_endomorphism_matrices_montgomery(E, Fp2, Pc, Qc, l_c, c)

def precompute_sqisign():
    import re

    from sage.misc.banner import require_version
    if not require_version(10, 0, print_message=True):
        exit('')

    for l in open('sqisign_parameters.txt'):
        for k in ('lvl', 'p', 'B'):
            m = re.search(rf'^\s*{k}\s*=\s*([x0-9a-f]+)', l)
            if m:
                v = ZZ(m.groups()[0], 0)
                globals()[k] = v

    L = {l for l,_ in (p**2 - 1).factor(limit=B+5) if l <= B}
    assert 2 in L
    L.remove(2)
    f = (p+1).valuation(2)
    if (p-1).valuation(2) > f:
        raise NotImplementedError('2-power torsion is on twist')
    # exp3 = (p-1).valuation(3)
    exp3 = (p+1).valuation(3)
    if (p-1).valuation(3) > exp3:
        raise NotImplementedError('3-power torsion is on twist')
    Lpls = {l for l in L if (p+1).valuation(l) >= (p-1).valuation(l)}
    Lmin = L - Lpls
    Lpls, Lmin = map(sorted, (Lpls, Lmin))
    Epls = [(p+1).valuation(l) for l in Lpls]
    Emin = [(p-1).valuation(l) for l in Lmin]
    Tpls = prod(l**e for l,e in zip(Lpls,Epls))
    Tmin = prod(l**e for l,e in zip(Lmin,Emin))

    Dcom = (Tpls*Tmin).prime_to_m_part(2)
    Dchall = 2**((p+1).valuation(2))
    # prod(l**(p+1).valuation(l) for l in (2))

    T = Tpls * Tmin

    if p % 4 != 3:
        raise NotImplementedError('requires p â‰¡ 3 (mod 4)')

    pfact = (p^2-1).factor(limit = 10000000)
    plist = [l for (l,e) in pfact]

    Fp2.<i> = GF((p,2), modulus=[1,0,1])
    Fp4 = Fp2.extension(2,'u')
    E = EllipticCurve(Fp4, [1,0])
    assert E.j_invariant() == 1728
    assert E.is_supersingular()
    assert E.change_ring(Fp2).frobenius() == -p
    assert E.order() == (p^2-1)^2

    from sage.groups.generic import order_from_multiple
    x = Fp4.gen()
    while True:
        x += 1
        try:
            P = E.lift_x(x)
        except ValueError:
            continue
        o = order_from_multiple(P, p^2-1, plist)
        if (T<<f).divides(o):
            P *= o // (T<<f)
            P.set_order(T<<f)
            break
    x = Fp4.gen()
    while True:
        x += 1
        try:
            Q = E.lift_x(x)
        except ValueError:
            continue
        o = order_from_multiple(Q, p^2-1, plist)
        if not (T<<f).divides(o):
            continue
        Q *= o // (T<<f)
        # Q.set_order(T<<f)
        if order_from_multiple(P.weil_pairing(Q, T<<f), T<<f, operation='*') == T<<f:
            break

    basis_two_order = 1<<f
    basis_three_order = 3**exp3

    print("basis three order: ", basis_three_order)
    print("")
    print("")
    print("")

    P_two, Q_two = ZZ(P.order()/basis_two_order)*P, ZZ(Q.order()/basis_two_order)*Q

    P_three, Q_three = ZZ(P.order()/basis_three_order)*P, ZZ(Q.order()/basis_three_order)*Q

    print("exp3: ", exp3)
    
    print("P:")
    print(P)

    print("Q:")
    print(Q)

    print("")
    print("P three order:", P_three.order())
    print("")
    print("Q three order:", Q_three.order())
    print("")

    # compute_and_print_endomorphism_matrices(E, Fp2, P_two, Q_two, 2, f)
    compute_and_print_endomorphism_matrices(E, Fp2, P_three, Q_three, 3, exp3)


# param = 128
param = 192
precompute_lit_si_gamal(param)
# precompute_sqisign()