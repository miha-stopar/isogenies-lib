#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]

pub mod Fp117 {
    const N: usize = 2;
    const WIN_LEN: usize = 5;
    const BITLEN: usize = 117;
    const MODULUS: [u64; N] = [0xFFFFFFFFFFFFFFFF, 0x00155FFFFFFFFFFF];
    const HALF_MODULUS: [u64; N] = [0x0000000000000000, 0x000AB00000000000];
    const R_VAL: [u64; N] = [0x0000000000000BFA, 0x0000400000000000];
    const MINUS_R_VAL: [u64; N] = [0xFFFFFFFFFFFFF405, 0x00151FFFFFFFFFFF];
    const DR_VAL: [u64; N] = [0x00000000000017F4, 0x0000800000000000];
    const TR_VAL: [u64; N] = [0x00000000000023EE, 0x0000C00000000000];
    const QR_VAL: [u64; N] = [0x0000000000002FE8, 0x0001000000000000];
    const R2_VAL: [u64; N] = [0xFA02FE80C02FA053, 0x001060BFA02FE80B];
    const P0I: u64 = 1;
    const TFIXDIV_VAL: [u64; N] = [0xD1CF38F4EBFF31E9, 0x0001B8E0C1722796];
    const TDEC_VAL: [u64; N] = [0x02FE80BFA02FE80B, 0x0014E00000000BFA];
    const SQRT_EH: [u8; 2] = [12, 21];
    const SQRT_EL: usize = 21;
    const FOURTH_ROOT_EH: [u8; 2] = [22, 10];
    const FOURTH_ROOT_EL: usize = 21;
    const P1: u64 = 2868903935;
    const P1DIV_M: u64 = 9169434198312072418;

    crate::finitefield::fp_gen::define_fp_core! {}

    #[cfg(test)]
    mod tests {
        crate::finitefield::fp_gen::define_fp_tests! {}
    }
}

pub mod Fp117Ext {
    use super::Fp117::Fp;
    const NQR_RE: Fp = Fp::new([0xB02349AC7D8B6CF2, 0x00006E1B649F9ECF]);

    crate::finitefield::fp2_gen::define_fp2_core! {}
    #[cfg(test)]
    mod tests {
        crate::finitefield::fp2_gen::define_fp2_tests! {}
    }
}

pub mod Fp214 {
    const N: usize = 4;
    const WIN_LEN: usize = 5;
    const BITLEN: usize = 214;
    const MODULUS: [u64; N] = [
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0x000000000020FFFF,
    ];
    const HALF_MODULUS: [u64; N] = [
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000108000,
    ];
    const R_VAL: [u64; N] = [
        0x000007C1F07C1F07,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000190000,
    ];
    const MINUS_R_VAL: [u64; N] = [
        0xFFFFF83E0F83E0F8,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0x000000000007FFFF,
    ];
    const DR_VAL: [u64; N] = [
        0x00000F83E0F83E0F,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000110000,
    ];
    const TR_VAL: [u64; N] = [
        0x00001745D1745D17,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000090000,
    ];
    const QR_VAL: [u64; N] = [
        0x00001F07C1F07C1F,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000010000,
    ];
    const R2_VAL: [u64; N] = [
        0x4E841D265156460D,
        0xF07C1F07C22CAA32,
        0x1F07C1F07C1F07C1,
        0x000000000014F07C,
    ];
    const P0I: u64 = 1;
    const TFIXDIV_VAL: [u64; N] = [
        0xE191A61CEBD9D188,
        0x5152A05A0AC1B0AB,
        0xD62F41FFFC5A4C68,
        0x00000000000FCDAD,
    ];
    const TDEC_VAL: [u64; N] = [
        0xF07C1F07C22CAA32,
        0x1F07C1F07C1F07C1,
        0xC1F07C1F07C1F07C,
        0x00000000000A1F07,
    ];
    const SQRT_EH: [u8; 2] = [2, 2];
    const SQRT_EL: usize = 41;
    const FOURTH_ROOT_EH: [u8; 2] = [1, 1];
    const FOURTH_ROOT_EL: usize = 41;
    const P1: u64 = 2214592511;
    const P1DIV_M: u64 = 17328759600548262035;

    crate::finitefield::fp_gen::define_fp_core! {}

    #[cfg(test)]
    mod tests {
        crate::finitefield::fp_gen::define_fp_tests! {}
    }
}

pub mod Fp214Ext {
    use super::Fp214::Fp;
    const NQR_RE: Fp = Fp::new([
        0x3D11618D8905DA42,
        0xD18F2B1A8884F443,
        0xF8076F8328125C4D,
        0x000000000016FB92,
    ]);

    crate::finitefield::fp2_gen::define_fp2_core! {}
    #[cfg(test)]
    mod tests {
        crate::finitefield::fp2_gen::define_fp2_tests! {}
    }
}

pub mod Fp509 {
    const N: usize = 8;
    const WIN_LEN: usize = 5;
    const BITLEN: usize = 509;
    const MODULUS: [u64; N] = [
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0x107FFFFFFFFFFFFF,
    ];
    const HALF_MODULUS: [u64; N] = [
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0840000000000000,
    ];
    const R_VAL: [u64; N] = [
        0x000000000000000F,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0880000000000000,
    ];
    const MINUS_R_VAL: [u64; N] = [
        0xFFFFFFFFFFFFFFF0,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0x07FFFFFFFFFFFFFF,
    ];
    const DR_VAL: [u64; N] = [
        0x000000000000001F,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0080000000000000,
    ];
    const TR_VAL: [u64; N] = [
        0x000000000000002E,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0900000000000000,
    ];
    const QR_VAL: [u64; N] = [
        0x000000000000003E,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0100000000000000,
    ];
    const R2_VAL: [u64; N] = [
        0xE0F83E0F83E0F92E,
        0x3E0F83E0F83E0F83,
        0x83E0F83E0F83E0F8,
        0xF83E0F83E0F83E0F,
        0x0F83E0F83E0F83E0,
        0xE0F83E0F83E0F83E,
        0x3E0F83E0F83E0F83,
        0x0CE0F83E0F83E0F8,
    ];
    const P0I: u64 = 1;
    const TFIXDIV_VAL: [u64; N] = [
        0x33C62F5F2E7B71D7,
        0xF3311A525595291C,
        0x451B17497727F4C5,
        0x5CDEBD71C54997FB,
        0xFBF9A5511DBDADF3,
        0x94DC847854DB2654,
        0xCC2B39D273AC32BF,
        0x015944E461C393EB,
    ];
    const TDEC_VAL: [u64; N] = [
        0x3E0F83E0F83E0F83,
        0x83E0F83E0F83E0F8,
        0xF83E0F83E0F83E0F,
        0x0F83E0F83E0F83E0,
        0xE0F83E0F83E0F83E,
        0x3E0F83E0F83E0F83,
        0x83E0F83E0F83E0F8,
        0x0E8000000000000F,
    ];
    const SQRT_EH: [u8; 2] = [2, 2];
    const SQRT_EL: usize = 100;
    const FOURTH_ROOT_EH: [u8; 2] = [1, 1];
    const FOURTH_ROOT_EL: usize = 100;
    const P1: u64 = 2214592511;
    const P1DIV_M: u64 = 17328759600548262035;

    crate::finitefield::fp_gen::define_fp_core! {}

    #[cfg(test)]
    mod tests {
        crate::finitefield::fp_gen::define_fp_tests! {}
    }
}

pub mod Fp509Ext {
    use super::Fp509::Fp;
    const NQR_RE: Fp = Fp::new([
        0x657B1D5619957F90,
        0x7DC7D38596BB85C0,
        0x25E8365868E98865,
        0xF66F7F244671316B,
        0x1165CB8A00AE5B59,
        0x6AC9A5C6CD182171,
        0x1DACDC54AE08C8A3,
        0x0DBE2F9586713665,
    ]);

    crate::finitefield::fp2_gen::define_fp2_core! {}
    #[cfg(test)]
    mod tests {
        crate::finitefield::fp2_gen::define_fp2_tests! {}
    }
}

pub mod Fp1757 {
    const N: usize = 28;
    const WIN_LEN: usize = 5;
    const BITLEN: usize = 1757;
    const MODULUS: [u64; N] = [
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0x0000000013FFFFFF,
    ];
    const HALF_MODULUS: [u64; N] = [
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x000000000A000000,
    ];
    const R_VAL: [u64; N] = [
        0x0000000CCCCCCCCC,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000010000000,
    ];
    const MINUS_R_VAL: [u64; N] = [
        0xFFFFFFF333333333,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0x0000000003FFFFFF,
    ];
    const DR_VAL: [u64; N] = [
        0x0000001999999999,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x000000000C000000,
    ];
    const TR_VAL: [u64; N] = [
        0x0000002666666666,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000008000000,
    ];
    const QR_VAL: [u64; N] = [
        0x0000003333333333,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000004000000,
    ];
    const R2_VAL: [u64; N] = [
        0xA3D70A3D70A3D70A,
        0xCCCCCCCCCCCCCD70,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0x0000000004CCCCCC,
    ];
    const P0I: u64 = 1;
    const TFIXDIV_VAL: [u64; N] = [
        0xBCD35A858793DD97,
        0xDFA43FE5C91D14E3,
        0xF837B4A2339C0EBE,
        0xA027525460AA64C2,
        0xAC083126E9E1B089,
        0x978D4FDF3B645A1C,
        0xB645A1CAC083126E,
        0x083126E978D4FDF3,
        0x8D4FDF3B645A1CAC,
        0x45A1CAC083126E97,
        0x3126E978D4FDF3B6,
        0x4FDF3B645A1CAC08,
        0xA1CAC083126E978D,
        0x26E978D4FDF3B645,
        0xDF3B645A1CAC0831,
        0xCAC083126E978D4F,
        0xE978D4FDF3B645A1,
        0x3B645A1CAC083126,
        0xC083126E978D4FDF,
        0x78D4FDF3B645A1CA,
        0x645A1CAC083126E9,
        0x83126E978D4FDF3B,
        0xD4FDF3B645A1CAC0,
        0x5A1CAC083126E978,
        0x126E978D4FDF3B64,
        0xFDF3B645A1CAC083,
        0x1CAC083126E978D4,
        0x00000000133B645A,
    ];
    const TDEC_VAL: [u64; N] = [
        0xCCCCCCCCCCCCCD70,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0xCCCCCCCCCCCCCCCC,
        0x000000000CCCCCCC,
    ];
    const SQRT_EH: [u8; 1] = [20];
    const SQRT_EL: usize = 350;
    const FOURTH_ROOT_EH: [u8; 1] = [10];
    const FOURTH_ROOT_EL: usize = 350;
    const P1: u64 = 2684354559;
    const P1DIV_M: u64 = 11068046455220847252;

    crate::finitefield::fp_gen::define_fp_core! {}

    #[cfg(test)]
    mod tests {
        crate::finitefield::fp_gen::define_fp_tests! {}
    }
}

pub mod Fp1757Ext {
    use super::Fp1757::Fp;
    const NQR_RE: Fp = Fp::new([
        0xE3D14C4EF997CFF5,
        0x905772A763118DB8,
        0x5A418E76C791139A,
        0xEFD60FF36E61C3E7,
        0x87454F5BD311031E,
        0xB806F20E6C01F9DA,
        0x40164FB3ABC89C43,
        0x79D1E908988D59B4,
        0xA517BD336C009B8F,
        0x3DC34D35BC9817B7,
        0xD7989C1C57E990A2,
        0x399FB72360DA2866,
        0xC9EE0E93286CDE02,
        0xC8FE91F83AB8CC9A,
        0x701DBBE5F62CB7F7,
        0x2228F5D1373EEB56,
        0x0E780CEB6AB8D54B,
        0x845F883D73C5E4E5,
        0x36D17C395749E5A2,
        0xFB99DC4A3751F979,
        0x3BE49ACA2E68B643,
        0xCC60F6B1034322A8,
        0xCE47CFE25D85C5DB,
        0x7DC906EBB88D05E3,
        0x74F3D10AAC766AB5,
        0x0D6FF54B7D5A5397,
        0xAF578D13FEA24B20,
        0x000000000C416D49,
    ]);

    crate::finitefield::fp2_gen::define_fp2_core! {}
    #[cfg(test)]
    mod tests {
        crate::finitefield::fp2_gen::define_fp2_tests! {}
    }
}

pub mod Fp5248 {
    const N: usize = 4;
    const WIN_LEN: usize = 5;
    const BITLEN: usize = 251;
    const MODULUS: [u64; N] = [
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0x04FFFFFFFFFFFFFF,
    ];
    const HALF_MODULUS: [u64; N] = [
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0280000000000000,
    ];
    const R_VAL: [u64; N] = [
        0x0000000000000033,
        0x0000000000000000,
        0x0000000000000000,
        0x0100000000000000,
    ];
    const MINUS_R_VAL: [u64; N] = [
        0xFFFFFFFFFFFFFFCC,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0x03FFFFFFFFFFFFFF,
    ];
    const DR_VAL: [u64; N] = [
        0x0000000000000066,
        0x0000000000000000,
        0x0000000000000000,
        0x0200000000000000,
    ];
    const TR_VAL: [u64; N] = [
        0x0000000000000099,
        0x0000000000000000,
        0x0000000000000000,
        0x0300000000000000,
    ];
    const QR_VAL: [u64; N] = [
        0x00000000000000CC,
        0x0000000000000000,
        0x0000000000000000,
        0x0400000000000000,
    ];
    const R2_VAL: [u64; N] = [
        0x3333333333333D70,
        0x3333333333333333,
        0x3333333333333333,
        0x0333333333333333,
    ];
    const P0I: u64 = 1;
    const TFIXDIV_VAL: [u64; N] = [
        0x49BA5E3BCD35A858,
        0xF7CED916872B020C,
        0x72B020C49BA5E353,
        0x025E353F7CED9168,
    ];
    const TDEC_VAL: [u64; N] = [
        0x3333333333333333,
        0x3333333333333333,
        0x3333333333333333,
        0x0100000000000033,
    ];
    const SQRT_EH: [u8; 1] = [10];
    const SQRT_EL: usize = 49;
    const FOURTH_ROOT_EH: [u8; 1] = [5];
    const FOURTH_ROOT_EL: usize = 49;
    const P1: u64 = 2684354559;
    const P1DIV_M: u64 = 11068046455220847252;

    crate::finitefield::fp_gen::define_fp_core! {}

    #[cfg(test)]
    mod tests {
        crate::finitefield::fp_gen::define_fp_tests! {}
    }
}

pub mod Fp5248Ext {
    use super::Fp5248::Fp;
    const NQR_RE: Fp = Fp::new([
        0x8966B696D7F56B97,
        0x8CFCC2A86E34F828,
        0x69BFE598FFB26E5C,
        0x04E5BCE6BB3B7C84,
    ]);

    crate::finitefield::fp2_gen::define_fp2_core! {}
    #[cfg(test)]
    mod tests {
        crate::finitefield::fp2_gen::define_fp2_tests! {}
    }
}

pub mod SQIsignLvl1 {
    const N: usize = 4;
    const WIN_LEN: usize = 5;
    const BITLEN: usize = 254;
    const MODULUS: [u64; N] = [
        0xFFFFFFFFFFFFFFFF, 0x252C9E49355147FF, 0x33A6A86587407437, 0x34E29E286B95D98C
    ];
    const HALF_MODULUS: [u64; N] = [
        0x0000000000000000, 0x92964F249AA8A400, 0x19D35432C3A03A1B, 0x1A714F1435CAECC6
    ];
    const R_VAL: [u64; N] = [
        0x0000000000000004, 0x6B4D86DB2ABAE000, 0x31655E69E2FE2F23, 0x2C75875E51A899CF
    ];
    const MINUS_R_VAL: [u64; N] = [
        0xFFFFFFFFFFFFFFFB, 0xB9DF176E0A9667FF, 0x024149FBA4424513, 0x086D16CA19ED3FBD
    ];
    const DR_VAL: [u64; N] = [
        0x0000000000000009, 0xB16E6F6D20247800, 0x2F24146E3EBBEA0F, 0x2408709437BB5A12
    ];
    const TR_VAL: [u64; N] = [
        0x000000000000000E, 0xF78F57FF158E1000, 0x2CE2CA729A79A4FB, 0x1B9B59CA1DCE1A55
    ];
    const QR_VAL: [u64; N] = [
        0x0000000000000013, 0x3DB040910AF7A800, 0x2AA18076F6375FE8, 0x132E430003E0DA98
    ];
    const R2_VAL: [u64; N] = [
        0x233625AE400674D4, 0x20AFD6C1025A1C2E, 0x30A841AB0920655D, 0x0D72E7D67C30CD3D
    ];
    const P0I: u64 = 1;
    const TFIXDIV_VAL: [u64; N] = [
        0x788877C1302C961F, 0x16A3CEC53526FC00, 0x7DB719F5274E1345, 0x103F808AA6FA6A94
    ];
    const TDEC_VAL: [u64; N] = [
        0x510E9971AE49BC2E, 0x1B7CE680DEAF2CF2, 0x2F8DFCE53994D5CB, 0x07462B35A359825C
    ];
    const SQRT_EH: [u8; 37] = [
        8, 10, 20, 10, 19, 4, 25, 19, 12, 9, 9, 14, 3, 26, 1, 8, 7, 12, 25, 16, 10, 19, 14, 6, 12, 12, 22, 11, 25, 21, 1, 5, 30, 20, 24, 9, 3
    ];
    const SQRT_EL: usize = 14;
    const FOURTH_ROOT_EH: [u8; 37] = [
        4, 5, 10, 21, 9, 18, 28, 9, 22, 20, 4, 23, 1, 29, 0, 20, 3, 22, 12, 8, 21, 9, 7, 3, 6, 6, 27, 21, 28, 26, 16, 2, 15, 10, 28, 20, 1
    ];
    const FOURTH_ROOT_EL: usize = 14;
    const P1: u64 = 3549067425;
    const P1DIV_M: u64 = 3876912545540035505;
    const NQR_RE_VAL: [u64; N] = [
        0x5A66A2185B2B5808, 0x7705ECB95CCB22EC, 0x742A73324BD4122C, 0x087C9D191E6EA304
    ];

    crate::finitefield::fp_gen::define_fp_core!{}

    #[cfg(test)]
    mod tests {
        crate::finitefield::fp_gen::define_fp_tests!{}
    }
}

pub mod SQIsignLvl1Ext {
    use super::SQIsignLvl1::Fp;
    const NQR_RE: Fp = Fp::new([
        0x5A66A2185B2B5808, 0x7705ECB95CCB22EC, 0x742A73324BD4122C, 0x087C9D191E6EA304
    ]);

    crate::finitefield::fp2_gen::define_fp2_core! {}
    #[cfg(test)]
    mod tests {
        crate::finitefield::fp2_gen::define_fp2_tests! {}
    }
}

pub mod FpLit128 {
    const N: usize = 13;
    const BITLEN: usize = 778;
    const MODULUS: [u64; N] = [
        0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xD2F9953ED2093F37, 0xD32A66EC7798CF1B, 0x7064A2C96F9B6E96, 0x90508BDB319726DB, 0xC6EB4C14E7EAFF40, 0x0C7094E1E204904C, 0x000000000000033F
    ];
    const HALF_MODULUS: [u64; N] = [
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0xE97CCA9F69049F9C, 0x699533763BCC678D, 0xB8325164B7CDB74B, 0x482845ED98CB936D, 0x6375A60A73F57FA0, 0x86384A70F1024826, 0x000000000000019F
    ];
    const R_VAL: [u64; N] = [
        0x004EDC022898EA62, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0xD274AC28DB6C9C90, 0xFCF1C17F9D5BDF2F, 0xB76E2FBC860956CC, 0xB7FFE9FA88B5B33A, 0xCCDDE587D03C6D4F, 0xFBF1E870B0187C1E, 0x00000000000000FE
    ];
    const MINUS_R_VAL: [u64; N] = [
        0xFFB123FDD767159D, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x0084E915F69CA2A7, 0xD638A56CDA3CEFEC, 0xB8F6730CE99217C9, 0xD850A1E0A8E173A0, 0xFA0D668D17AE91F0, 0x107EAC7131EC142D, 0x0000000000000240
    ];
    const DR_VAL: [u64; N] = [
        0x009DB8045131D4C4, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0xA4E95851B6D93920, 0xF9E382FF3AB7BE5F, 0x6EDC5F790C12AD99, 0x6FFFD3F5116B6675, 0x99BBCB0FA078DA9F, 0xF7E3D0E16030F83D, 0x00000000000001FD
    ];
    const TR_VAL: [u64; N] = [
        0x00EC940679CABF26, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x775E047A9245D5B0, 0xF6D5447ED8139D8F, 0x264A8F35921C0466, 0x27FFBDEF9A2119B0, 0x6699B09770B547EF, 0xF3D5B9521049745C, 0x00000000000002FC
    ];
    const QR_VAL: [u64; N] = [
        0x013B7008A263A989, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x76D91B649BA93308, 0x209C9F11FDD6ADA3, 0x6D541C28A889EC9D, 0x4FAF1C0EF13FA60F, 0x6C8C4A0A5906B5FE, 0xE3570CE0DE5D602E, 0x00000000000000BC
    ];
    const R2_VAL: [u64; N] = [
        0x42466E36AD45C3F6, 0x6CF4C0FA5E6CE5A0, 0xFE5AFF94269DAE99, 0xE2AEB9668FDEAC07, 0xCB15A0FA8F528B40, 0xCFF2AF49ADCFA14A, 0xBCF51565026DE25D, 0x4424414050F43714, 0x798C88103EE31003, 0xB6A0466BBFE33C21, 0x77DD9BA8F733C9CE, 0x7B7608E28A45BE44, 0x0000000000000170
    ];
    const THREE_INV_VAL: [u64; N] = [
        0x556F9EAB62DDA376, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x4626E40D9E798985, 0xA9A5EB2A89C94A65, 0x3D24BA942CADC799, 0x92AAA35382E73BBE, 0x999F4C829ABECF1A, 0xFEA5F8259008295F, 0x0000000000000054
    ];
    const P0I: u64 = 1;
    const TFIXDIV_VAL: [u64; N] = [
        0xAC755F3E16221177, 0x1B685253E5927CE1, 0xF56A1CA052714173, 0x1CBD44138FC1DE7C, 0x908F61F105A55B21, 0x30086F18285D1AAE, 0xC8DEE6129E55201A, 0x991BBF12D1B6AFFE, 0xE7CD1311EE01437D, 0xCF6B794EF6A6B73F, 0xF119482DE9A65E54, 0xB115555C42D9D94C, 0x00000000000001C0
    ];
    const TDEC_VAL: [u64; N] = [
        0x6CF4C0FA5E6CE5A0, 0xFE5AFF94269DAE99, 0xE2AEB9668FDEAC07, 0xCB15A0FA8F528B40, 0xCFF2AF49ADCFA14A, 0x43C59BC6C4904A2D, 0xB71174F903BA3EFA, 0x96F452F37D803439, 0x2CB54EE4B2DC8233, 0xD164C4F30F2ECAE4, 0xDAEAA5793D868B86, 0x25D836026FA406AB, 0x00000000000000D7
    ];
    const WIN_LEN: usize = 5;
    const SQRT_EH: [u8; 79] = [
        7, 31, 9, 2, 4, 13, 31, 20, 18, 25, 23, 20, 23, 17, 7, 3, 19, 23, 3, 27, 13, 6, 21, 12, 26, 22, 20, 27, 22, 25, 23, 5, 25, 2, 5, 25, 0, 23, 13, 27, 4, 23, 12, 12, 22, 29, 5, 2, 10, 16, 4, 16, 30, 15, 21, 31, 28, 20, 0, 19, 22, 14, 3, 19, 9, 16, 4, 1, 4, 30, 16, 19, 18, 16, 3, 3, 30, 19, 1
    ];
    const SQRT_EL: usize = 77;
    const FOURTH_ROOT_EH: [u8; 79] = [
        16, 19, 31, 4, 1, 18, 22, 15, 10, 25, 28, 11, 26, 27, 24, 19, 17, 25, 27, 17, 29, 6, 19, 10, 6, 13, 11, 26, 13, 27, 28, 27, 18, 12, 17, 18, 12, 16, 27, 22, 13, 18, 11, 6, 6, 27, 30, 2, 1, 5, 8, 2, 8, 31, 23, 26, 15, 14, 10, 16, 9, 11, 23, 17, 25, 4, 8, 18, 0, 2, 15, 24, 9, 9, 24, 17, 1, 31, 25
    ];
    const FOURTH_ROOT_EL: usize = 76;
    const P1: u64 = 3485670437;
    const P1DIV_M: u64 = 4282932740617556152;

    crate::finitefield::fp_gen::define_fp_core!{}

    #[cfg(test)]
    mod tests {
        crate::finitefield::fp_gen::define_fp_tests!{}
    }
}

pub mod FpLit128Ext {
    use super::FpLit128::Fp;
    const NQR_RE: Fp = Fp::new([
        0x494D9497DAC41940, 0x22C250AC00A0934D, 0xEA037D1F9E340178, 0xEA5324A84CEC04E8, 0x455980F956EFC125, 0x7C9AD8D2B54F2B27, 0x25FB0436138AB599, 0x01CBCEB97E086663, 0x194196F5C4A4A629, 0x84274FCFF03471EB, 0xB1B2B03CC919B4AC, 0x4169EB4F508A699A, 0x00000000000000C2
    ]);

    const P1_N_BITLEN: usize = 387;
    const P1_N: [u8; 49] = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4
    ];
    const P1_B: usize = 386;

    const P1_C_BITLEN: usize = 257;
    const P1_C: [u8; 33] = [
        137, 124, 219, 248, 101, 0, 108, 120, 192, 93, 208, 149, 65, 201, 193, 92, 186, 124, 152, 167, 130, 129, 253, 214, 9, 77, 139, 39, 122, 247, 182, 178, 1
    ];
    const P1_C_EXP: usize = 162;
    const P1_F: u64 = 30;

    const P1_DIV_N_BITLEN: usize = 392;
    const P1_DIV_N: [u8; 49] = [
        206, 79, 130, 180, 79, 101, 190, 244, 198, 51, 230, 29, 187, 153, 202, 180, 165, 219, 230, 91, 178, 40, 25, 220, 182, 201, 101, 204, 246, 34, 20, 36, 208, 191, 250, 57, 5, 211, 186, 49, 19, 36, 129, 120, 56, 37, 28, 195, 207
    ];

    const P1_DIV_C_BITLEN: usize = 521;
    const P1_DIV_C: [u8; 66] = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 39, 62, 130, 75, 246, 135, 229, 15, 87, 193, 57, 103, 133, 216, 101, 233, 1
    ];

    crate::finitefield::fp2_gen::define_fp2_core! {}
    #[cfg(test)]
    mod tests {
        crate::finitefield::fp2_gen::define_fp2_tests! {}
    }
}

pub mod FpLit192 {
    const N: usize = 19;
    const BITLEN: usize = 1163;
    const MODULUS: [u64; N] = [
        0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x3379544C3A34DAA7, 0x21B7935908E42B2B, 0x906B4DE5EB6D771F, 0x2CBE8C1918D4648A, 0xC406D98E3B5F726B, 0xAA8AF0C84CDDE099, 0x95C3EC55817B9EED, 0x9B48764AB5CC8E22, 0x70DD6317E5C58C3F, 0x00000000000006B8
    ];
    const HALF_MODULUS: [u64; N] = [
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x99BCAA261D1A6D54, 0x90DBC9AC84721595, 0x4835A6F2F5B6BB8F, 0x965F460C8C6A3245, 0xE2036CC71DAFB935, 0xD5457864266EF04C, 0x4AE1F62AC0BDCF76, 0xCDA43B255AE64711, 0x386EB18BF2E2C61F, 0x000000000000035C
    ];
    const R_VAL: [u64; N] = [
        0x002617B21CB4FAEA, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x2D7AAB9710081270, 0x79CA9F1BC506C9A3, 0x11FF2101EEF027D9, 0x7F5EF33A6BB6BC13, 0xC33A3A8F51F718D4, 0x8056E8BB1CE01901, 0x8552BCE46010B312, 0x11B28C36865E5816, 0x0488A39872A8A1AF, 0x000000000000031B
    ];
    const MINUS_R_VAL: [u64; N] = [
        0xFFD9E84DE34B0515, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x05FEA8B52A2CC837, 0xA7ECF43D43DD6188, 0x7E6C2CE3FC7D4F45, 0xAD5F98DEAD1DA877, 0x00CC9EFEE9685996, 0x2A34080D2FFDC798, 0x10712F71216AEBDB, 0x8995EA142F6E360C, 0x6C54BF7F731CEA90, 0x000000000000039D
    ];
    const DR_VAL: [u64; N] = [
        0x004C2F643969F5D4, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x5AF5572E201024E0, 0xF3953E378A0D9346, 0x23FE4203DDE04FB2, 0xFEBDE674D76D7826, 0x8674751EA3EE31A8, 0x00ADD17639C03203, 0x0AA579C8C0216625, 0x2365186D0CBCB02D, 0x09114730E551435E, 0x0000000000000636
    ];
    const TR_VAL: [u64; N] = [
        0x00724716561EF0BF, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x54F6AE78F5E35CA8, 0x4BA849FA463031BE, 0xA592151FE163006D, 0x515E4D962A4FCFAE, 0x85A7D61FBA85D812, 0xD679C96909C26A6B, 0xFA344A579EB67A49, 0x99CF2E58DD4E7A20, 0x9CBC87B1723458CD, 0x0000000000000298
    ];
    const QR_VAL: [u64; N] = [
        0x00985EC872D3EBA9, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x82715A1005EB6F18, 0xC572E9160B36FB61, 0xB7913621D0532846, 0xD0BD40D096068BC1, 0x48E210AF0C7CF0E6, 0x56D0B22426A2836D, 0x7F87073BFEC72D5C, 0xAB81BA8F63ACD237, 0xA1452B49E4DCFA7C, 0x00000000000005B3
    ];
    const R2_VAL: [u64; N] = [
        0x4771B44D0F0FA18D, 0x37CD062F5E06264D, 0x009E945308984E18, 0xE5F18E2AEA6DBB53, 0xB33CF5ACE793E8E8, 0x762486874F0782C4, 0x53347B381712EDB2, 0xCBBC7995FCBB6F86, 0x61000564DED43AC9, 0x17AA8BA9416D6DB0, 0xB1F597A3924C1BDF, 0xD9E8EEAE49DCB79E, 0xE224C93743307B7E, 0xE7CA5573F54E33BD, 0xB391DA73208C7FE1, 0x5D608BF177E3E172, 0xE22C7D30C39F32A7, 0xF22AB8D095988851, 0x0000000000000455
    ];
    const THREE_INV_VAL: [u64; N] = [
        0x556207E60991A8F8, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x3179C6BA817B4295, 0x946897449CEFB553, 0x66473EEF41EE5CB2, 0xF2F403CEDF1FD70D, 0x1917F9E3ED91FF38, 0x4724436E9233F367, 0x3AF3872FCBAD504F, 0x6D6BD2EEA5FD26C9, 0xF76BCDED6A113E0F, 0x0000000000000583
    ];
    const P0I: u64 = 1;
    const TFIXDIV_VAL: [u64; N] = [
        0x793678F1BC89A667, 0x30E358D93D2518B8, 0x75B5F1CC7357A148, 0x77CC467CA8C8E4F9, 0x86A870E7DDE5AE3A, 0xD40D1C0CE6E32046, 0x80ECB7BFEFFB85CC, 0x988A80E75777142F, 0x29C033483D85B181, 0xFCC936BD7F46C1DB, 0xF1D29842AFD4B239, 0xC448159B8B34D1D7, 0x63D93207EAFF5040, 0x4B1A4C7EAC4FA071, 0xAAD291894985DDD3, 0x40F2778CEC44D9B4, 0x4AA6F2128F928D17, 0xB630645D88E99930, 0x000000000000045F
    ];
    const TDEC_VAL: [u64; N] = [
        0x37CD062F5E06264D, 0x009E945308984E18, 0xE5F18E2AEA6DBB53, 0xB33CF5ACE793E8E8, 0x762486874F0782C4, 0x53347B381712EDB2, 0xCBBC7995FCBB6F86, 0x61000564DED43AC9, 0xEF2E50B135E58438, 0xB5CD5D4A2B387BE9, 0xE90B28BD8E74C414, 0xA8EBCF2E8FD01F89, 0x76130D16E8850FED, 0xC5AA0BB76DC7EB65, 0xDCA70B8897ABBE60, 0x21C6C7B8BC3C229F, 0x1B75EA61E9CC3733, 0x2372ED6F32331E86, 0x00000000000001E0
    ];
    const WIN_LEN: usize = 5;
    const SQRT_EH: [u8; 118] = [
        20, 10, 27, 20, 17, 14, 24, 4, 10, 5, 15, 19, 25, 10, 22, 2, 18, 3, 1, 25, 26, 4, 15, 27, 16, 28, 3, 23, 11, 27, 22, 30, 18, 23, 9, 11, 3, 4, 21, 8, 18, 17, 26, 24, 8, 6, 24, 8, 31, 18, 5, 11, 19, 28, 30, 21, 29, 24, 17, 25, 22, 1, 8, 28, 12, 2, 28, 29, 6, 19, 16, 12, 24, 11, 17, 10, 13, 27, 29, 25, 29, 5, 16, 21, 2, 27, 7, 28, 10, 10, 4, 14, 4, 19, 11, 11, 5, 25, 14, 8, 26, 6, 31, 3, 6, 22, 24, 5, 31, 5, 6, 22, 14, 3, 14, 24, 21, 1
    ];
    const SQRT_EL: usize = 115;
    const FOURTH_ROOT_EH: [u8; 117] = [
        10, 21, 13, 26, 8, 7, 12, 2, 21, 18, 23, 25, 12, 5, 11, 1, 25, 17, 16, 12, 13, 18, 23, 13, 8, 30, 17, 27, 21, 13, 11, 15, 25, 27, 20, 21, 1, 18, 10, 4, 25, 8, 13, 12, 4, 3, 12, 20, 15, 25, 18, 21, 9, 14, 31, 26, 14, 28, 24, 12, 27, 0, 4, 14, 6, 1, 30, 14, 19, 9, 8, 6, 28, 21, 8, 21, 22, 29, 30, 28, 30, 2, 24, 10, 17, 29, 3, 14, 5, 5, 2, 7, 18, 25, 21, 21, 18, 12, 7, 4, 13, 19, 31, 1, 3, 11, 28, 18, 31, 2, 3, 11, 23, 1, 7, 28, 26
    ];
    const FOURTH_ROOT_EL: usize = 115;
    const P1: u64 = 3608026028;
    const P1DIV_M: u64 = 3512122602809983069;

    crate::finitefield::fp_gen::define_fp_core!{}

    #[cfg(test)]
    mod tests {
        crate::finitefield::fp_gen::define_fp_tests!{}
    }
}

pub mod FpLit192Ext {
    use super::FpLit192::Fp;
    const NQR_RE: Fp = Fp::new([
        0x22988628721B7E83, 0x53D0AC2596D0BB38, 0xA8985368C042AFA7, 0xF0D632336068F736, 0xE84067B84DD4496E, 0x41CF80B4A799CAB0, 0x867E5E7842839AEE, 0x7D932E615A9BBB9D, 0xB74DCDC3057CD06F, 0x17B69EF2262D80A5, 0xC6C447EFBB1B3350, 0x47E013B0A12578B9, 0xAAC4F769D556E43B, 0x5B14A7F174EA04A8, 0x9CE7CE8C561E6141, 0xA67B8D57AE2D1EA5, 0x6E245B0887DF133C, 0x229385E491780B15, 0x00000000000004BA
    ]);

    const P1_N_BITLEN: usize = 579;
    const P1_N: [u8; 73] = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4
    ];
    const P1_B: usize = 578;

    const P1_C_BITLEN: usize = 386;
    const P1_C: [u8; 49] = [
        91, 56, 215, 226, 121, 198, 2, 186, 221, 225, 25, 123, 22, 5, 52, 97, 149, 178, 217, 72, 10, 176, 141, 227, 13, 170, 220, 217, 70, 21, 102, 180, 67, 3, 199, 251, 33, 240, 39, 252, 61, 7, 254, 242, 157, 135, 123, 54, 2
    ];
    const P1_C_EXP: usize = 243;
    const P1_F: u64 = 118;

    const P1_DIV_N_BITLEN: usize = 585;
    const P1_DIV_N: [u8; 74] = [
        170, 54, 141, 14, 19, 85, 222, 204, 202, 10, 57, 66, 214, 228, 109, 200, 199, 93, 219, 122, 121, 211, 26, 164, 34, 25, 53, 70, 6, 163, 47, 203, 154, 220, 215, 142, 99, 182, 1, 113, 38, 120, 55, 19, 50, 188, 162, 106, 187, 231, 94, 96, 21, 251, 112, 165, 136, 35, 115, 173, 146, 29, 210, 230, 15, 99, 113, 249, 197, 88, 55, 28, 174, 1
    ];

    const P1_DIV_C_BITLEN: usize = 778;
    const P1_DIV_C: [u8; 98] = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 80, 2, 9, 103, 99, 98, 116, 49, 195, 21, 207, 213, 174, 202, 149, 23, 194, 165, 89, 157, 121, 178, 124, 9, 3
    ];

    crate::finitefield::fp2_gen::define_fp2_core! {}
    #[cfg(test)]
    mod tests {
        crate::finitefield::fp2_gen::define_fp2_tests! {}
    }
}

pub mod FpLit256 {
    const N: usize = 25;
    const BITLEN: usize = 1551;
    const MODULUS: [u64; N] = [
        0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xE914A93DCCB7758F, 0x733B9F64AAF1123E, 0xDCBFFAC8767B073E, 0xCE982A6963570B96, 0x2AB9AFA607B0D49D, 0x1318F17BAC73DB00, 0xBFACF27D5A0A539D, 0x15BBDAB7BCF9C9D6, 0x20B3C0D0410DCF23, 0xA8E3EB1A9DC447ED, 0x4EE00C4BDB9DDEA0, 0xE0D6B3C33956F4BA, 0x0000000000004158
    ];
    const HALF_MODULUS: [u64; N] = [
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x748A549EE65BBAC8, 0x399DCFB25578891F, 0x6E5FFD643B3D839F, 0xE74C1534B1AB85CB, 0x155CD7D303D86A4E, 0x898C78BDD639ED80, 0x5FD6793EAD0529CE, 0x8ADDED5BDE7CE4EB, 0x9059E0682086E791, 0x5471F58D4EE223F6, 0x27700625EDCEEF50, 0x706B59E19CAB7A5D, 0x00000000000020AC
    ];
    const R_VAL: [u64; N] = [
        0x0003EAE3B4D2B05D, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x3DAE3BF6D0674AB0, 0x77CEBE3F6AA56FE2, 0x8CA6864CFA54A0C4, 0xA7B7AF1052A1011E, 0x0C30344A7CF1B3B8, 0x7B4C7A1C43051D6B, 0x26E5AA4498303CE6, 0x174A0EDB2A158B43, 0x3592B578BDDD9CD7, 0x3A3BF40472A88A0F, 0x3D24FBE93FBD3924, 0xC9F81353C212F4CC, 0x0000000000003D13
    ];
    const MINUS_R_VAL: [u64; N] = [
        0xFFFC151C4B2D4FA2, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xAB666D46FC502ADF, 0xFB6CE125404BA25C, 0x5019747B7C266679, 0x26E07B5910B60A78, 0x1E897B5B8ABF20E5, 0x97CC775F696EBD95, 0x98C74838C1DA16B6, 0xFE71CBDC92E43E93, 0xEB210B578330324B, 0x6EA7F7162B1BBDDD, 0x11BB10629BE0A57C, 0x16DEA06F7743FFEE, 0x0000000000000445
    ];
    const DR_VAL: [u64; N] = [
        0x0007D5C769A560BB, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x9247CEAFD4171FD0, 0x7C61DD1A2A59CD85, 0x3C8D11D17E2E3A4A, 0x80D733B741EAF6A6, 0xEDA6B8EEF23292D3, 0xE38002BCD9965FD5, 0x8E1E620BD656262F, 0x18D842FE97314CAF, 0x4A71AA213AAD6A8B, 0xCB93FCEE478CCC31, 0x2B69EB86A3DC93A7, 0xB31972E44ACEF4DE, 0x00000000000038CE
    ];
    const TR_VAL: [u64; N] = [
        0x000BC0AB1E781119, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0xE6E16168D7C6F4F0, 0x80F4FBF4EA0E2B28, 0xEC739D560207D3D0, 0x59F6B85E3134EC2D, 0xCF1D3D93677371EE, 0x4BB38B5D7027A240, 0xF55719D3147C0F79, 0x1A667722044D0E1B, 0x5F509EC9B77D383F, 0x5CEC05D81C710E53, 0x19AEDB2407FBEE2B, 0x9C3AD274D38AF4F0, 0x0000000000003489
    ];
    const QR_VAL: [u64; N] = [
        0x000FAB8ED34AC177, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x3B7AF421DB76CA10, 0x85881ACFA9C288CC, 0x9C5A28DA85E16D56, 0x33163D05207EE1B5, 0xB093C237DCB45109, 0xB3E713FE06B8E4AB, 0x5C8FD19A52A1F8C2, 0x1BF4AB457168CF88, 0x742F9372344D05F3, 0xEE440EC1F1555075, 0x07F3CAC16C1B48AE, 0x855C32055C46F502, 0x0000000000003044
    ];
    const R2_VAL: [u64; N] = [
        0x1012D65A0FC79B43, 0xBBAD26189BE81986, 0x46312BB30FFB9A85, 0xC7099C03772FEB72, 0xE331AC6C8392827F, 0xC7D9CC4D2A1BD9B8, 0xC7E78C41337D937B, 0xC5C29E8E2DB9AF95, 0x0AAC11B63450421F, 0x8DDE748D778025EF, 0x63EBAB28477BB8F1, 0x228D08D69C1C80F3, 0x6C68AEC8D3A37622, 0x65A7403A83B83632, 0xE7CE233FDCBA5EC9, 0xB36948BD9F00285E, 0xA1126CDDC9EDB597, 0xB70222F405521341, 0xBAA7973ACC1E7870, 0xFC4316BF7AAA3CAD, 0xFBFB51E864B66A07, 0xFB8DB0848DEA92BE, 0xF9A0BBDEB177BB6A, 0x977BAEB5F9581D9E, 0x00000000000029EA
    ];
    const THREE_INV_VAL: [u64; N] = [
        0x5556A3A13C463AC9, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x0547DA2623476745, 0x74C1FF02EAD7DC20, 0x17622949F7C38FC0, 0x6C4D56A1086FB2C4, 0x75E131322EC67451, 0x35D4C9B133F99BCE, 0x8CBFDA6A6EC1A160, 0x6B95EC18E1585FA5, 0xD25367B3155313B4, 0x840143688F65B34D, 0xF3A1B1805252FCCC, 0x83E1D39E11959F6A, 0x0000000000003FEC
    ];
    const P0I: u64 = 1;
    const TFIXDIV_VAL: [u64; N] = [
        0x786374B3D75F904A, 0xC679C45700794F83, 0xE7470875ADA9A7DB, 0x4212910EB896B058, 0x241D95D4F304CC52, 0xC6F035B88C36C534, 0x649D7AEF8A137D0A, 0xD61CB2BF8AACDF0A, 0x1BEDF03CB59C8DB4, 0x7D359DCB72A28D6C, 0x40E9A1506BEBD39F, 0xE12825CDA818B761, 0xBC06FA0ECCD9073A, 0xDCAD5BD08B031D99, 0x80B87109370A47F9, 0xDE90B6F4474C7902, 0xED6DC3EBBF83A8B5, 0x15204E6290756607, 0x170E38AC0885ED58, 0x2FBA3DC9E6653AD6, 0x68AB8A69C3F468A4, 0x22B063FF998E5182, 0x2D6586758C36E64D, 0x84E61C02BDDEB2C6, 0x00000000000031D0
    ];
    const TDEC_VAL: [u64; N] = [
        0xBBAD26189BE81986, 0x46312BB30FFB9A85, 0xC7099C03772FEB72, 0xE331AC6C8392827F, 0xC7D9CC4D2A1BD9B8, 0xC7E78C41337D937B, 0xC5C29E8E2DB9AF95, 0x0AAC11B63450421F, 0x8DDE748D778025EF, 0x63EBAB28477BB8F1, 0x228D08D69C1C80F3, 0xB637FC084EC56AD2, 0x4A079B870F4C7DDD, 0x849008F280936BF7, 0xFA5A388E6CA3240F, 0xD770F66BCA48D8AF, 0xA978CD6F8523B852, 0x6F38268316C6691F, 0x0E5FE04B805C3ADF, 0xA24CAC0D63E527F6, 0xEB558530D32A3C25, 0x260089D752C12D34, 0x4ECEED6968D4744A, 0x5D04838E85F54BB7, 0x000000000000041A
    ];
    const WIN_LEN: usize = 5;
    const SQRT_EH: [u8; 156] = [
        25, 26, 29, 22, 12, 14, 15, 18, 10, 10, 4, 29, 30, 17, 4, 2, 15, 21, 18, 12, 31, 28, 14, 6, 7, 31, 28, 0, 27, 19, 29, 16, 12, 29, 31, 23, 28, 22, 5, 23, 16, 11, 13, 12, 9, 19, 10, 16, 9, 7, 23, 19, 20, 6, 12, 15, 0, 19, 30, 21, 25, 21, 10, 0, 16, 13, 15, 14, 12, 29, 30, 2, 15, 12, 12, 2, 29, 28, 20, 20, 0, 13, 21, 15, 18, 7, 11, 31, 11, 11, 7, 25, 25, 7, 15, 15, 11, 13, 15, 23, 21, 24, 8, 30, 28, 6, 4, 8, 16, 6, 16, 7, 11, 16, 20, 29, 7, 2, 17, 27, 9, 13, 12, 29, 3, 7, 10, 1, 10, 15, 23, 19, 27, 30, 18, 24, 0, 16, 27, 9, 26, 5, 29, 13, 21, 28, 12, 24, 19, 21, 21, 1, 14, 12, 5, 8
    ];
    const SQRT_EL: usize = 154;
    const FOURTH_ROOT_EH: [u8; 157] = [
        16, 12, 29, 14, 11, 6, 23, 7, 9, 5, 5, 18, 14, 31, 8, 2, 17, 23, 10, 9, 22, 15, 14, 7, 19, 19, 15, 14, 16, 29, 25, 14, 8, 22, 30, 31, 11, 14, 27, 18, 11, 24, 21, 6, 22, 20, 9, 5, 24, 20, 19, 27, 9, 10, 3, 22, 7, 16, 9, 31, 26, 28, 10, 5, 0, 24, 22, 7, 7, 22, 14, 15, 17, 7, 6, 6, 17, 14, 14, 10, 10, 16, 22, 26, 7, 25, 19, 21, 31, 21, 21, 19, 28, 28, 19, 23, 23, 21, 22, 23, 27, 10, 12, 4, 15, 14, 3, 2, 4, 8, 3, 24, 19, 5, 8, 26, 30, 3, 17, 24, 29, 20, 6, 22, 30, 17, 3, 21, 0, 21, 23, 27, 25, 13, 15, 9, 12, 0, 24, 29, 4, 29, 18, 30, 22, 10, 14, 6, 28, 25, 26, 26, 0, 7, 22, 2, 4
    ];
    const FOURTH_ROOT_EL: usize = 153;
    const P1: u64 = 2192687533;
    const P1DIV_M: u64 = 17686157364310499185;

    crate::finitefield::fp_gen::define_fp_core!{}

    #[cfg(test)]
    mod tests {
        crate::finitefield::fp_gen::define_fp_tests!{}
    }
}

pub mod FpLit256Ext {
    use super::FpLit256::Fp;
    const NQR_RE: Fp = Fp::new([
        0xBE07627CBB308636, 0xB2AC4483758DFBF0, 0xD80CEE3666078F7B, 0x4457F3011987DFA1, 0x3272D85BC4DF5099, 0x293E95692005A8EA, 0x4F91BBE41B8A2B2B, 0x6A317C8F6BB3036E, 0xAF777DBFC203C8A2, 0xF51FF7C78AAA7346, 0x46D8AC4F11A39956, 0x14BA700F1C6292E9, 0x29787C65FFADD121, 0x9725A80DD71F3527, 0x8A3A42EC24188C90, 0x08BCD92A3C321EB6, 0x82860AA738FD29E7, 0x2AB7838DA9D04BB3, 0x6829C0F06B57F2F1, 0xA2A4348B0C2A2D4A, 0x4FD1124245C16EC6, 0xB2C70C6279BBFAAB, 0x4AD09790B92FE2EA, 0x4A7C089C53307A2F, 0x0000000000003A48
    ]);

    const P1_N_BITLEN: usize = 771;
    const P1_N: [u8; 97] = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4
    ];
    const P1_B: usize = 770;

    const P1_C_BITLEN: usize = 514;
    const P1_C: [u8; 65] = [
        81, 1, 251, 190, 145, 65, 178, 210, 15, 62, 174, 137, 232, 96, 234, 243, 67, 208, 163, 11, 56, 14, 199, 151, 196, 124, 227, 36, 65, 238, 20, 182, 135, 69, 18, 72, 34, 22, 198, 212, 238, 173, 163, 80, 180, 107, 190, 254, 30, 132, 240, 254, 22, 99, 123, 108, 223, 125, 1, 255, 222, 225, 48, 226, 2
    ];
    const P1_C_EXP: usize = 324;
    const P1_F: u64 = 436;

    const P1_DIV_N_BITLEN: usize = 781;
    const P1_DIV_N: [u8; 98] = [
        100, 221, 45, 115, 79, 42, 69, 186, 143, 68, 188, 42, 217, 231, 206, 156, 207, 193, 158, 29, 178, 254, 47, 183, 229, 194, 213, 88, 154, 10, 166, 115, 39, 53, 236, 129, 233, 107, 174, 10, 192, 246, 28, 235, 94, 60, 198, 68, 231, 148, 130, 86, 159, 60, 235, 175, 117, 114, 62, 239, 173, 246, 110, 197, 200, 115, 67, 16, 52, 240, 44, 72, 251, 17, 113, 167, 198, 250, 56, 42, 168, 119, 231, 246, 18, 3, 184, 147, 46, 189, 85, 206, 240, 172, 53, 56, 86, 16
    ];

    const P1_DIV_C_BITLEN: usize = 1037;
    const P1_DIV_C: [u8; 130] = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 56, 45, 124, 233, 204, 167, 84, 70, 146, 6, 56, 94, 18, 27, 205, 119, 13, 40, 212, 236, 90, 32, 212, 15, 131, 56, 152, 225, 102, 100, 120, 169, 22
    ];

    crate::finitefield::fp2_gen::define_fp2_core! {}
    #[cfg(test)]
    mod tests {
        crate::finitefield::fp2_gen::define_fp2_tests! {}
    }
}